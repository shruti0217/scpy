#!usr/bin/python3.8.0  # --> called: shebang, checkout why it's useful

"""
    Project: To be decided
    Module : dashed.py
    Autor  : Shruti
    Created: 13th September 2020
    
    These are called docstrings, they can be used to store multiline string values.
    Commonly used to document your code on a high-level, allows the user to understand how
    your code is to be used.
    Though docstrings can also be used as a variable!
"""


def dashed(target_string):
    """
        This function adds a dash on both sides of a vowel in a given string.
        Example: "test string" --> "t-e-st str-i-ng" 
        Parameters:
        -----------
            -   target_string(required): string value to be transformed.
        Returns:
        --------
            -   transformed_string: updated string with dash added on both sides of the vowel.
    """
    # safety checks, not necessary but it's good to have them
    assert type(target_string) is str, f'target_string must be a string, received {type(target_string)}.'
    assert bool(target_string), 'target_string must not be empty.'

    vowels = 'aeiou'
    transformed_string = ''
    for character in target_string:  # loop over each character
        if character.lower() in vowels:  # detect if current character is a vowel
            character = f'-{character}-'    # add dash on both sides of vowel
        transformed_string += character  # insert character into a new string

    return transformed_string
         

# main block, entry point for program
# look up: what does __name__ == '__main__' mean in python
if __name__ == '__main__':
    test_string = 'HELL is better '  # declare test string
    results = dashed(test_string)    # get updated string

    # display final results
    print('Results generated by using dashed function:')
    print(f'Original String: {test_string}\nUpdated String: {results}')
    print(f'\n{"-x-"*20}\n')  # does nothing, used for visual separation on console

    # alternative, one-liner solution
    # look up: lambda, mapc & reduce
    results_2 = ''.join(list(map(lambda x: f'-{x}-' if x.lower() in 'aeiuo' else x, test_string)))

    # display results again
    print('Results generated by one-liner lambda function:')
    print(f'Original String: {test_string}\nUpdated String: {results_2}')

# End of file
